create database CookyApp
go

use CookyApp
go

CREATE TABLE ACCOUNT
(
ID_ACCOUNT VARCHAR(20) NOT NULL,
GMAIL VARCHAR(255) NOT NULL,
PHONE_NUMBER VARCHAR(15) NOT NULL,
FULL_NAME NVARCHAR(255) NOT NULL,
USERNAME VARCHAR(50) NOT NULL,
PASSWORD VARCHAR(255) NOT NULL,
PRIMARY KEY (ID_ACCOUNT)
);

CREATE TABLE ROLE
(
ID_ROLE VARCHAR(20) NOT NULL,
NAME_ROLE NVARCHAR(50) NOT NULL,
PRIMARY KEY (ID_ROLE)
);

CREATE TABLE CHEF
(
ID_CHEF VARCHAR(20) NOT NULL,
PHONE_NUMBER VARCHAR(15) NOT NULL,
FULL_NAME NVARCHAR(255) NOT NULL,
START_DATE DATE NOT NULL,
GMAIL VARCHAR(30) NOT NULL,
ACTIVE BIT NOT NULL,
PRIMARY KEY (ID_CHEF)
);

CREATE TABLE TOPIC
(
ID_TOPIC VARCHAR(20) NOT NULL,
NAME_TOPIC NVARCHAR(255) NOT NULL,
ACTIVE BIT NOT NULL,
PRIMARY KEY (ID_TOPIC)
);

CREATE TABLE STUDENT
(
ID_STUDENT VARCHAR(20) NOT NULL,
NAME_STUDENT NVARCHAR(255) NOT NULL,
DATE_OF_BIRTH DATE NOT NULL,
GENDER NVARCHAR(10) NOT NULL,
MEMBER BIT NOT NULL,
TOTAL_PAYMENT INT NOT NULL,
ACTIVE BIT NOT NULL,
GMAIL VARCHAR(30) NOT NULL,
PHONE_NUMBER VARCHAR(12) NOT NULL,
PRIMARY KEY (ID_STUDENT)
);

CREATE TABLE USER_FUNCTION
(
INSERT_STUDENT BIT NOT NULL,
UPDATE_STUDENT BIT NOT NULL,
DELETE_STUDENT BIT NOT NULL,
INSERT_CLASS BIT NOT NULL,
UPDATE_CLASS BIT NOT NULL,
DELETE_CLASS BIT NOT NULL,
INSERT_CHEF BIT NOT NULL,
UPDATE_CHEF BIT NOT NULL,
DELETE_CHEF BIT NOT NULL,
REPORT_CLASS BIT NOT NULL,
DATA_REALITY BIT NOT NULL,
SUMMARY BIT NOT NULL,
REPORT_LOCATION BIT NOT NULL,
REPORT_MONTH BIT NOT NULL,
TIME_TABLE_OVERALL BIT NOT NULL,
DATA_PLAN BIT NOT NULL,
GENERAL_KPI BIT NOT NULL,
TIME_TABLE_PLAN BIT NOT NULL,
INSERT_TOPIC BIT NOT NULL,
UPDATE_TOPIC BIT NOT NULL,
DELETE_TOPIC BIT NOT NULL,
INSERT_LOCATION BIT NOT NULL,
UPDATE_LOCATION BIT NOT NULL,
DELETE_LOCATION BIT NOT NULL,
LIST_CLASS BIT NOT NULL,
LIST_CHEF BIT NOT NULL,
LIST_LOCATION BIT NOT NULL,
LIST_TOPIC BIT NOT NULL,
LIST_STUDENT BIT NOT NULL,
ID_ROLE VARCHAR(20) NOT NULL,
ID_ACCOUNT VARCHAR(20) NOT NULL,
FOREIGN KEY (ID_ROLE) REFERENCES ROLE(ID_ROLE),
FOREIGN KEY (ID_ACCOUNT) REFERENCES ACCOUNT (ID_ACCOUNT)
);

CREATE TABLE TOPIC_CHEF
(
NAME_SPECIALITY NVARCHAR(255) NOT NULL,
ID_CHEF VARCHAR(20) NOT NULL,
ID_TOPIC VARCHAR(20) NOT NULL,
FOREIGN KEY (ID_CHEF) REFERENCES CHEF(ID_CHEF),
FOREIGN KEY (ID_TOPIC) REFERENCES TOPIC(ID_TOPIC)
);

CREATE TABLE PERSONAL_PROFILE
(
ID_PROFILE VARCHAR(20) PRIMARY KEY,
CCCD VARCHAR(20),
DATE_OF_BIRTH DATE,
ADDRESS NVARCHAR(100),
NATIVE_PLACE NVARCHAR(50),
ID_ACCOUNT VARCHAR(20),
ID_CHEF VARCHAR(20),
CHECK ((ID_ACCOUNT IS NOT NULL AND ID_CHEF IS NULL) OR (ID_ACCOUNT IS NULL AND ID_CHEF IS NOT NULL)),
FOREIGN KEY(ID_ACCOUNT) REFERENCES ACCOUNT (ID_ACCOUNT) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (ID_CHEF) REFERENCES CHEF(ID_CHEF) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE LOCATION
(
ID_LOCATION VARCHAR(20) NOT NULL,
NAME_LOCATION NVARCHAR(255) NOT NULL,
ADDRESS NVARCHAR(255) NOT NULL,
DESCRIPTION NVARCHAR(MAX) NOT NULL,
MAX_LOCATION_QUANTITY INT NOT NULL,
ACTIVE BIT NOT NULL,
PRIMARY KEY (ID_LOCATION)
);

CREATE TABLE CLASSROOM
(
ID_CLASS VARCHAR(20) NOT NULL,
NAME_CLASS NVARCHAR(255) NOT NULL,
DURATION_HOUR INT NOT NULL,
START_DATE DATE NOT NULL,
END_HOUR TIME NOT NULL,
STATUS_CLASS NVARCHAR(50) NOT NULL,
MAX_QUANTITY INT NOT NULL,
DESCRIPTION NVARCHAR(MAX) NOT NULL,
QUANTITY_ARISE INT NOT NULL,
PROVISIONAL_REVENUE INT NOT NULL,
REAL_REVENUE INT NOT NULL,
COMMISSION DECIMAL(10, 2) NOT NULL,
START_HOUR TIME NOT NULL,
PICTURE VARCHAR(255) NOT NULL,
MATERIAL_COST INT NOT NULL,
FREELANCER_COST INT NOT NULL,
ANOTHER_COST INT NOT NULL,
NOTE NVARCHAR(MAX) NOT NULL,
ID_TOPIC VARCHAR(20) NOT NULL,
ID_CHEF VARCHAR(20) NOT NULL,
ID_LOCATION VARCHAR(20) NOT NULL,
PRIMARY KEY (ID_CLASS),
FOREIGN KEY (ID_TOPIC) REFERENCES TOPIC(ID_TOPIC),
FOREIGN KEY (ID_CHEF) REFERENCES CHEF(ID_CHEF),
FOREIGN KEY (ID_LOCATION) REFERENCES LOCATION (ID_LOCATION)
);

CREATE TABLE NORMAL_CLASS
(
FEE INT NOT NULL,
ID_CLASS VARCHAR(20) NOT NULL,
FOREIGN KEY (ID_CLASS) REFERENCES CLASSROOM(ID_CLASS)
);

CREATE TABLE FREE_CLASS
(
NAME_SPONSOR NVARCHAR(255) NOT NULL,
ID_CLASS VARCHAR(20) NOT NULL,
FOREIGN KEY (ID_CLASS) REFERENCES CLASSROOM(ID_CLASS)
);

CREATE TABLE STUDENT_CLASS
(
STATUS_PAYMENT NVARCHAR(50) NOT NULL,
FORM_PAYMENT NVARCHAR(50) NOT NULL,
CODE_MEMBER_DISCOUNT INT NOT NULL,
VOUCHER_DISCOUNT INT NOT NULL,
DEAL_DISCOUNT INT NOT NULL,
APP_DISCOUNT INT NOT NULL,
CASH INT NOT NULL,
QUANTITY INT NOT NULL,
TOTAL_PAYMENT INT NOT NULL,
ID_CLASS VARCHAR(20) NOT NULL,
ID_STUDENT VARCHAR(20) NOT NULL,
FOREIGN KEY (ID_CLASS) REFERENCES CLASSROOM(ID_CLASS),
FOREIGN KEY (ID_STUDENT) REFERENCES STUDENT(ID_STUDENT)
);

go
CREATE TRIGGER trg_InsertTopic
ON TOPIC
INSTEAD OF INSERT
AS
BEGIN
    DECLARE @newID VARCHAR(20);
    DECLARE @prefix VARCHAR(5) = 'TOPIC';
    DECLARE @maxID INT;

    -- Lấy giá trị ID_TOPIC lớn nhất hiện có và tách số
    SELECT @maxID = ISNULL(MAX(CAST(SUBSTRING(ID_TOPIC, 6, LEN(ID_TOPIC) - 5) AS INT)), 0) + 1
    FROM TOPIC;

    -- Tạo ID_TOPIC mới
    SET @newID = @prefix + RIGHT('000' + CAST(@maxID AS VARCHAR(3)), 3);

    -- Chèn dữ liệu vào bảng TOPIC với ID_TOPIC mới
    INSERT INTO TOPIC (ID_TOPIC, NAME_TOPIC, ACTIVE)
    SELECT @newID, NAME_TOPIC, ACTIVE
    FROM inserted;
END;
go
CREATE TRIGGER trg_InsertLocation
ON LOCATION
INSTEAD OF INSERT
AS
BEGIN
    DECLARE @newID VARCHAR(20);
    DECLARE @prefix VARCHAR(3) = 'LOC';
    DECLARE @maxID INT;

    -- Lấy giá trị ID_LOCATION lớn nhất hiện có và tách số
    SELECT @maxID = ISNULL(MAX(CAST(SUBSTRING(ID_LOCATION, 4, LEN(ID_LOCATION) - 3) AS INT)), 0) + 1
    FROM LOCATION;

    -- Tạo ID_LOCATION mới
    SET @newID = @prefix + RIGHT('000' + CAST(@maxID AS VARCHAR(3)), 3);

    -- Chèn dữ liệu vào bảng LOCATION với ID_LOCATION mới
    INSERT INTO LOCATION (ID_LOCATION, NAME_LOCATION, ADDRESS, DESCRIPTION, MAX_LOCATION_QUANTITY, ACTIVE)
    SELECT @newID, NAME_LOCATION, ADDRESS, DESCRIPTION, MAX_LOCATION_QUANTITY, ACTIVE
    FROM inserted;
END;
go
CREATE TRIGGER trg_InsertProfile
ON PERSONAL_PROFILE
INSTEAD OF INSERT
AS
BEGIN
    DECLARE @NewID VARCHAR(20);
    DECLARE @MaxID VARCHAR(20);

    -- Lấy mã ID_PROFILE lớn nhất hiện có
    SELECT @MaxID = MAX(ID_PROFILE) FROM PERSONAL_PROFILE;

    -- Nếu không có ID_PROFILE nào, khởi tạo giá trị đầu tiên
    IF @MaxID IS NULL
    BEGIN
        SET @NewID = 'PROF001';
    END
    ELSE
    BEGIN
        -- Tăng giá trị ID_PROFILE lên 1
        SET @NewID = 'PROF' + RIGHT('000' + CAST(CAST(SUBSTRING(@MaxID, 5, LEN(@MaxID) - 4) AS INT) + 1 AS VARCHAR), 3);
    END

    -- Chèn bản ghi mới với ID_PROFILE mới
    INSERT INTO PERSONAL_PROFILE (ID_PROFILE, CCCD, DATE_OF_BIRTH, ADDRESS, NATIVE_PLACE, ID_ACCOUNT, ID_CHEF)
    SELECT @NewID, CCCD, DATE_OF_BIRTH, ADDRESS, NATIVE_PLACE, ID_ACCOUNT, ID_CHEF
    FROM inserted;
END;
go
CREATE TRIGGER trg_InsertAccount
ON ACCOUNT
INSTEAD OF INSERT
AS
BEGIN
    DECLARE @NewID VARCHAR(20);
    DECLARE @MaxID VARCHAR(20);

    -- Lấy mã ID_ACCOUNT lớn nhất hiện có
    SELECT @MaxID = MAX(ID_ACCOUNT) FROM ACCOUNT;

    -- Nếu không có ID_ACCOUNT nào, khởi tạo giá trị đầu tiên
    IF @MaxID IS NULL
    BEGIN
        SET @NewID = 'ACC001';
    END
    ELSE
    BEGIN
        -- Tăng giá trị ID_ACCOUNT lên 1
        SET @NewID = 'ACC' + RIGHT('000' + CAST(CAST(SUBSTRING(@MaxID, 4, LEN(@MaxID) - 3) AS INT) + 1 AS VARCHAR), 3);
    END

    -- Chèn bản ghi mới với ID_ACCOUNT mới
    INSERT INTO ACCOUNT (ID_ACCOUNT, GMAIL, PHONE_NUMBER, FULL_NAME, USERNAME, PASSWORD)
    SELECT @NewID, GMAIL, PHONE_NUMBER, FULL_NAME, USERNAME, PASSWORD
    FROM inserted;
END;
go
CREATE TRIGGER trg_InsertChef
ON CHEF
INSTEAD OF INSERT
AS
BEGIN
    DECLARE @newID VARCHAR(20);
    DECLARE @prefix VARCHAR(5) = 'CHEF';
    DECLARE @maxID INT;

    -- Lấy giá trị ID_CHEF lớn nhất hiện có và tách số
    SELECT @maxID = ISNULL(MAX(CAST(SUBSTRING(ID_CHEF, 5, LEN(ID_CHEF) - 4) AS INT)), 0) + 1
    FROM CHEF;

    -- Tạo ID_CHEF mới
    SET @newID = @prefix + RIGHT('000' + CAST(@maxID AS VARCHAR(3)), 3);

    -- Chèn dữ liệu vào bảng CHEF với ID_CHEF mới
    INSERT INTO CHEF (ID_CHEF, PHONE_NUMBER, FULL_NAME, START_DATE, GMAIL, ACTIVE)
    SELECT @newID, PHONE_NUMBER, FULL_NAME, START_DATE, GMAIL, ACTIVE
    FROM inserted;
END;
go
CREATE TRIGGER trg_AutoGenerateID
ON CLASSROOM
INSTEAD OF INSERT
AS
BEGIN
    DECLARE @NewID VARCHAR(20);
    DECLARE @MaxID INT;

    -- Lấy số ID cao nhất hiện có
    SELECT @MaxID = ISNULL(MAX(CAST(SUBSTRING(ID_CLASS, 6, 3) AS INT)), 0) FROM CLASSROOM;

    -- Tính toán ID mới
    SET @NewID = 'CLASS' + RIGHT('000' + CAST(@MaxID + 1 AS VARCHAR(3)), 3);

    -- Chèn bản ghi mới với ID tự động
    INSERT INTO CLASSROOM (ID_CLASS, NAME_CLASS, DURATION_HOUR, START_DATE, END_HOUR, STATUS_CLASS, MAX_QUANTITY, DESCRIPTION, QUANTITY_ARISE, PROVISIONAL_REVENUE, REAL_REVENUE, COMMISSION, START_HOUR, PICTURE, MATERIAL_COST, FREELANCER_COST, ANOTHER_COST, NOTE, ID_TOPIC, ID_CHEF, ID_LOCATION)
    SELECT @NewID, NAME_CLASS, DURATION_HOUR, START_DATE, END_HOUR, STATUS_CLASS, MAX_QUANTITY, DESCRIPTION, QUANTITY_ARISE, PROVISIONAL_REVENUE, REAL_REVENUE, COMMISSION, START_HOUR, PICTURE, MATERIAL_COST, FREELANCER_COST, ANOTHER_COST, NOTE, ID_TOPIC, ID_CHEF, ID_LOCATION
    FROM inserted;
END;
go
CREATE TRIGGER trg_InsertStudent
ON STUDENT
INSTEAD OF INSERT
AS
BEGIN
    DECLARE @NewId NVARCHAR(20);
    DECLARE @MaxId NVARCHAR(20);

    -- Lấy ID lớn nhất hiện có
    SELECT @MaxId = MAX(ID_STUDENT) FROM STUDENT;

    -- Nếu không có ID nào, khởi tạo ID mới
    IF @MaxId IS NULL
        SET @NewId = 'STD001';
    ELSE
        SET @NewId = 'STD' + RIGHT('000' + CAST(CAST(SUBSTRING(@MaxId, 4, LEN(@MaxId) - 3) AS INT) + 1 AS NVARCHAR), 3);

    -- Chèn bản ghi mới với ID mới
    INSERT INTO STUDENT (ID_STUDENT, NAME_STUDENT, DATE_OF_BIRTH, GENDER, MEMBER, TOTAL_PAYMENT, ACTIVE, GMAIL, PHONE_NUMBER)
    SELECT @NewId, NAME_STUDENT, DATE_OF_BIRTH, GENDER, MEMBER, TOTAL_PAYMENT, ACTIVE, GMAIL, PHONE_NUMBER
    FROM inserted;
END;
go


ALTER TABLE ACCOUNT ADD FailedAttempts INT DEFAULT 0;
ALTER TABLE ACCOUNT ADD IsLocked BIT DEFAULT 0;
ALTER TABLE ACCOUNT ADD IsLoggedIn BIT DEFAULT 0 NOT NULL;

SET DATEFORMAT dmy;  
GO  

INSERT INTO ACCOUNT (GMAIL, PHONE_NUMBER, FULL_NAME, USERNAME, PASSWORD)
VALUES ('admin@example.com', '1234567890', 'Administrator', 'admin', 'admin');

INSERT INTO ROLE (ID_ROLE, NAME_ROLE) VALUES
('ROLE001', 'Admin'),
('ROLE002', 'User');

INSERT INTO USER_FUNCTION (INSERT_STUDENT, UPDATE_STUDENT, DELETE_STUDENT, INSERT_CLASS, UPDATE_CLASS, DELETE_CLASS, 
                           INSERT_CHEF, UPDATE_CHEF, DELETE_CHEF, REPORT_CLASS, DATA_REALITY, SUMMARY, 
                           REPORT_LOCATION, REPORT_MONTH, TIME_TABLE_OVERALL, DATA_PLAN, GENERAL_KPI, 
                           TIME_TABLE_PLAN, INSERT_TOPIC, UPDATE_TOPIC, DELETE_TOPIC, INSERT_LOCATION, 
                           UPDATE_LOCATION, DELETE_LOCATION, LIST_CLASS, LIST_CHEF, LIST_LOCATION, 
                           LIST_TOPIC, LIST_STUDENT, ID_ROLE, ID_ACCOUNT) VALUES
(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 'ROLE001', 'ACC001');

-- Chèn thông tin vào bảng PERSONAL_PROFILE
INSERT INTO PERSONAL_PROFILE (ID_PROFILE, CCCD, DATE_OF_BIRTH, ADDRESS, NATIVE_PLACE, ID_ACCOUNT, ID_CHEF)
VALUES ('PROFILE001', '123456789', '1980-01-01', '123 Main St, City, Country', 'Hometown', 'ACC001', NULL);